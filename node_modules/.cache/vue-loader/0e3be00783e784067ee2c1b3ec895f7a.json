{"remainingRequest":"C:\\Vue\\video-record\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Vue\\video-record\\node_modules\\multicorder\\vuetify_ui\\src\\components\\MulticorderUI.vue?vue&type=style&index=0&id=1a6032c8&prod&scoped=true&lang=css&","dependencies":[{"path":"C:\\Vue\\video-record\\node_modules\\multicorder\\vuetify_ui\\src\\components\\MulticorderUI.vue","mtime":499162500000},{"path":"C:\\Vue\\video-record\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Vue\\video-record\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1655715156000},{"path":"C:\\Vue\\video-record\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Vue\\video-record\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Vue\\video-record\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci52aWRlb2JveCB7CiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7Cn0K"},{"version":3,"sources":["MulticorderUI.vue"],"names":[],"mappings":";AAoQA;AACA;AACA","file":"MulticorderUI.vue","sourceRoot":"node_modules/multicorder/vuetify_ui/src/components","sourcesContent":["<template>\n  <v-container class=\"text-center  ma-0 pa-0\">\n    <v-row class=\"text-center \">\n      <v-col cols=\"12\">\n        <div class=\"videobox\">\n          <Multicorder \n            :video-source=\"videoSource\"\n            @error=\"onError\"\n            @cameras=\"onCameras\"\n            @video-live=\"onVideoLive\"\n            @view-change=\"onViewChange\"\n            @new-recording=\"onNewRecording\"\n            @delete-recording=\"onDeleteRecording\"\n            @player-loaded=\"onPlayerLoaded\"\n            ref=\"multicorder\"\n            :videoTypes=\"videoTypes\"\n            :recorderMode=\"recorderMode\"\n          />\n        </div>\n        <v-select\n          v-if=\"videoSource == null\"\n          v-show=\"view == 'video'\"\n          :items=\"videoSourceList\"\n          :return-object=\"true\"\n          v-model=\"videoSource\"\n          label=\"Select video input\"\n        />\n        <div\n          v-if=\"videoSource\"\n          align=\"right\"\n          background-color=\"black\"\n          class=\"grey--text videobox\"\n        >\n          {{ videoSource.text }}\n          <v-icon @click=\"videoClose\" color=\"grey\">mdi-close-circle</v-icon>\n        </div>\n\n\n\n        <v-row v-show=\"view == 'videoPlayer'\" class=\"text-center  mt-3 pt-0\">\n          <v-col cols=\"auto\" align=\"left\">\n            <v-icon class=\"mx-2\" large color=\"red\" v-if=\"!isPlayerMuted\" @click=\"togglePlayerMuted\"\n              >mdi-speaker</v-icon\n            >\n            <v-icon class=\"mx-2\" large v-if=\"isPlayerMuted\" @click=\"togglePlayerMuted\"\n              >mdi-speaker-off</v-icon\n            >\n          </v-col>\n          <v-col align=\"center\">\n            <v-btn class=\"mx-2\" @click=\"playRecording\" fab mdi-icon x-small light\n              ><v-icon x-large color=\"red\">mdi-play-circle</v-icon></v-btn\n            >\n            <v-btn class=\"mx-2\" @click=\"downloadRecording\" fab mdi-icon x-small light\n              ><v-icon x-large>mdi-download-circle</v-icon></v-btn\n            >\n            <v-btn class=\"mx-2\" @click=\"deleteRecording\" fab mdi-icon x-small light\n              ><v-icon x-large color=\"red\">mdi-delete-circle</v-icon></v-btn\n            >\n          </v-col>\n          <v-col cols=\"auto\" align=\"right\">\n            <v-icon x-large @click=\"videoSnapshot(view)\" color=\"teal\">mdi-camera</v-icon>\n          </v-col>\n        </v-row>\n\n\n\n\n\n        <v-row v-show=\"view == 'video' && videoSource != null\">\n          <v-col  cols=\"auto\" align=\"center\">\n            <v-icon large color=\"red\" v-if=\"!isMuted\" @click=\"toggleMuted\"\n              >mdi-microphone</v-icon\n            >\n            <v-icon large v-if=\"isMuted\" @click=\"toggleMuted\">mdi-microphone-off</v-icon>\n          </v-col>\n          <v-col align=\"center\">\n            <v-btn v-show=\"controls == 'liveVideo'\" class=\"mx-2\" @click=\"videoRecord\" fab mdi-icon x-small light\n              ><v-icon x-large color=\"red\">mdi-record-circle</v-icon></v-btn\n            >\n            <v-btn v-show=\"controls == 'recordingVideo'\" class=\"mx-2\" @click=\"videoStopRecording\" fab mdi-icon x-small light\n              ><v-icon x-large color=\"red\">mdi-stop-circle</v-icon></v-btn\n            >\n            <v-btn v-show=\"controls == 'recordingVideo'\" class=\"mx-2\" @click=\"pause\" fab mdi-icon x-small light v-if=\"!isPaused\"\n              ><v-icon x-large>mdi-pause-circle</v-icon></v-btn\n            >\n            <v-btn v-show=\"controls == 'recordingVideo'\" class=\"mx-2\" @click=\"resume\" fab mdi-icon x-small dark v-if=\"isPaused\"\n              ><v-icon x-large>mdi-pause-circle</v-icon></v-btn\n            >\n          </v-col>\n          <v-col  cols=\"auto\" align=\"center\">\n            <v-icon x-large @click=\"videoSnapshot(view)\" color=\"teal\">mdi-camera</v-icon>\n          </v-col>\n        </v-row>\n\n        <v-row v-show=\"view == 'snapshot'\">\n          <v-col>\n            <v-btn class=\"mx-2\" @click=\"closeSnapshot()\" fab mdi-icon x-small light\n              ><v-icon x-large color=\"red\">mdi-close-circle</v-icon></v-btn\n            >\n            <v-btn class=\"mx-2\" @click=\"snapshotDownload\" fab mdi-icon x-small light\n              ><v-icon x-large>mdi-download-circle</v-icon></v-btn\n            >\n          </v-col>\n        </v-row>\n\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\n/**\n * For Hot reload load the `*.vue` files from the parent `/src/` directly.\n */\nimport { Multicorder } from \"multicorder\";\n// import { Multicorder } from \"../../../src/lib-components/index.js\";\n\nexport default {\n  name: \"MulticorderUI\",\n  components: {\n    Multicorder,\n  },\n  props: {\n    videoTypes: {\n      type: Array,\n      default: () => {\n        return [\"camera\", \"screen\"];\n      },\n    },\n    recorderMode: {\n      type: String,\n      default: \"single\",\n    },\n  },\n  data() {\n    return {\n      controls: null,\n      videoSource: null,\n      videoSourceList: [],\n      isPaused: false,\n      isPlayerPaused: false,\n      isMuted: true,\n      isPlayerMuted: true,\n      view: \"video\",\n      recordings: [], // local sparsed list of recording data\n    };\n  },\n  methods: {\n    onError(error) {\n      console.log(\"Error emitted\", error);\n    },\n    onCameras(cameras) {\n      console.log(\"Available cameras\", cameras);\n      /**\n       * We are implementing a `multicorder` with camera and screen support.\n       * We need to create a list that groups the items for a `v-select` component.\n       * We use the `listFromCameras` helper function provided by the component.\n       * The Multicorder component maintains a list of `cameras` if we need them independently.\n       */\n      this.videoSourceList = this.$refs.multicorder.listFromCameras(cameras);\n    },\n    onVideoLive() {\n      this.controls = \"liveVideo\";\n    },\n    onViewChange(view) {\n      this.view = view;\n    },\n    onNewRecording(recording) {\n      this.recordings.push(recording);\n      if (this.recorderMode == \"single\") {\n        // Load the video into the player and force disposition\n        // this.view = \"videoPlayer\";\n        this.loadRecording(0);\n      }\n    },\n    onDeleteRecording(index) {\n      this.recordings.splice(index, 1);\n      if (this.recorderMode == \"single\") {\n        this.controls = \"liveVideo\"  \n      }\n    },\n    onPlayerLoaded() {\n      //this.playRecording();\n    },\n    videoRecord() {\n      this.controls = \"recordingVideo\";\n      this.$refs.multicorder.startVideoRecording();\n    },\n    videoSnapshot(fromView) {\n      this.$refs.multicorder.videoSnapshot(fromView);\n    },\n    videoClose() {\n      this.$refs.multicorder.stopVideo();\n      this.view = \"video\";\n      this.controls = \"liveVideo\";\n      this.videoSource = null;\n    },\n    videoStopRecording() {\n      this.$refs.multicorder.stopRecording();\n      // resume the video, minus recording\n      this.resume();\n    },\n    resume() {\n      this.isPaused = false;\n      this.$refs.multicorder.resume();\n    },\n    pause() {\n      this.isPaused = true;\n      this.$refs.multicorder.pause();\n    },\n    closeSnapshot() {\n      this.$refs.multicorder.closeSnapshot();\n    },\n    snapshotDownload() {\n      this.$refs.multicorder.downloadSnapshot();\n    },\n    downloadRecording(index) {\n      if(this.recorderMode === 'single') {\n        index = 0;\n      }\n      this.$refs.multicorder.downloadRecording(index);\n    },\n    deleteRecording(index) {\n      if(this.recorderMode === 'single') {\n        index = 0;\n      }\n      this.$refs.multicorder.deleteRecording(index);\n    },\n    async loadRecording(index) {\n      await this.$refs.multicorder.loadRecording(index);\n    },\n    playRecording() {\n      this.isPlayerPaused = false;\n      this.$refs.multicorder.playRecording();\n    },\n    pausePlayer() {\n      this.isPlayerPaused = true;\n      this.$refs.multicorder.pausePlayer();\n    },\n    resumePlayer() {\n      this.isPlayerPaused = false;\n      this.$refs.multicorder.resumePlayer();\n    },\n    deletePlayerRecording() {\n      this.$refs.multicorder.deletePlayerRecording();\n    },\n    closePlayer() {\n      this.$refs.multicorder.closePlayer();\n    },\n    toggleMuted() {\n      this.isMuted = !this.isMuted;\n    },\n    togglePlayerMuted() {\n      this.isPlayerMuted = !this.isPlayerMuted;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.videobox {\n  background-color: black;\n}\n</style>\n"]}]}